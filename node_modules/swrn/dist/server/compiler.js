'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.replaceStaticSource = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _globPromise = require('glob-promise');

var _globPromise2 = _interopRequireDefault(_globPromise);

var _path3 = require('path');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var checkDistStaticSource = function checkDistStaticSource(content, distImages, options) {
    // 解析require的代码
    var dev = options.dev,
        assetPrefix = options.assetPrefix,
        dir = options.dir,
        path = options.path;

    var line = 0;
    var _content = 'var _SWRN_STYLE = [] \n var _CSSModules = require(\'react-css-modules\') \n';
    content = content + '\r\n';
    for (var i = 0; i < content.length; i++) {
        if (content[i].match(/\n/) != null) {
            var res = '';
            for (var j = line; j < i; j++) {
                res += content[j];
            }
            res = res.replace(/(^\s*)|(\s*$)/g, "");

            //将这一行的require代码匹配出来
            var _require = res.match(/require\(['"][^'"]*['"]\)/g);

            if (_require != null) {
                _require.map(function (item) {
                    //匹配css
                    var _css = item.match(/require\(['"](.*)(\.css|less|scss)['"]\)/);

                    if (_css != null) {
                        //这里需要拿到css modules 对应的css json字符

                        //先获取存放键值对的 swrn文件
                        if (!dev) {
                            var _path = path.split('/');
                            _path.pop();
                            _path = _path.join('/');
                            _path = (0, _path3.join)(_path, _css[1] + 'swrn');

                            var cssJson = JSON.parse(_fs2.default.readFileSync(_path, "utf-8"));

                            res = res.replace(item, '\'\'') + '\n';

                            //判断是不是空对象
                            var _cssdata = (0, _stringify2.default)(cssJson.data);
                            if (_cssdata != '{}') {
                                res = res + '\n' + ('_SWRN_STYLE.push(' + _cssdata + ')');
                            }
                        } else {
                            res = res.replace(item, '\'\'') + '\n';
                        }
                    }

                    //匹配图片
                    var _image = item.match(/require\(['"](.*)(\.jpg|jpeg|png|gif)['"]\)/);
                    if (_image != null) {
                        var ImageUrl = '';

                        if (!dev) {
                            //path _image[1] ext _image[2]
                            var _path2 = _image[1].split('/').filter(function (item) {
                                return item != '..' && item != '.';
                            });
                            _path2.unshift('static');
                            _path2 = _path2.join('/'); // static/images/2

                            //创建正则规则
                            var _match = new RegExp(_path2 + '.(.*).' + _image[2] + '$');

                            distImages.map(function (item) {
                                if (item.match(_match) != null) {
                                    item = item.split('/');
                                    item.shift();
                                    ImageUrl = assetPrefix + '/' + item.join('/');
                                }
                            });
                        }

                        // ${assetPrefix}/static/images/[name].[hash:8].[ext]
                        res = res.replace(item, '\'' + ImageUrl + '\'');
                    }
                });
            }

            //将这一行的export.default代码匹配出来
            var _default = res.match(/exports.default(.*);$/);

            if (_default != null) {
                var ComponentName = _default[1].replace(/[\s=]/g, '');
                res = '\n                var ComponentStyle = {};                \n                if (_SWRN_STYLE.length) { \n                    for (var i = 0; i < _SWRN_STYLE.length; i++) { \n                        for (var key in _SWRN_STYLE[i]) { \n                            ComponentStyle[key] = _SWRN_STYLE[i][key];\n                        }\n                    }\n                };\n                exports.default = _CSSModules(' + ComponentName + ',ComponentStyle);';
            }

            // //将这一行的use strict代码匹配出来
            // const _strict = res.match(/use strict/)

            // if (_strict != null) {
            //     res = res.replace(/use strict/, '')
            // }    

            _content += res + '\n';
            line = i;
        }
    }

    return _content;
};

var replaceStaticSource = exports.replaceStaticSource = function replaceStaticSource(options) {

    //读取dist目录下文件
    return new _promise2.default(function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(resolve, reject) {
            var distFile, distImages;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return (0, _globPromise2.default)(options.dist + '/dist/**/*.js', { cwd: options.dir });

                        case 2:
                            distFile = _context.sent;
                            _context.next = 5;
                            return (0, _globPromise2.default)(options.dist + '/static/**/*', { cwd: options.dir });

                        case 5:
                            distImages = _context.sent;


                            if (distFile.length) {
                                distFile.map(function (item) {
                                    var path = (0, _path3.join)(options.dir, item);
                                    options.path = path;
                                    var content = checkDistStaticSource(_fs2.default.readFileSync(path, "utf-8"), distImages, options);
                                    _fs2.default.writeFileSync(path, content);
                                });
                            }

                            resolve();

                        case 8:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }());
};