'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _path = require('path');

var _render = require('./render');

var _render2 = _interopRequireDefault(_render);

var _hotReloader = require('./hot-reloader');

var _hotReloader2 = _interopRequireDefault(_hotReloader);

var _router = require('./router');

var _router2 = _interopRequireDefault(_router);

var _globPromise = require('glob-promise');

var _globPromise2 = _interopRequireDefault(_globPromise);

var _document = require('./document');

var _document2 = _interopRequireDefault(_document);

var _app = require('../lib/app');

var _app2 = _interopRequireDefault(_app);

var _server = require('react-dom/server');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('babel-register')({
    presets: ['react', 'es2015']
});

global.SWRN_InServer = true;

/**
 * 注册express路由
 * 包括静态资源、react-router、mock数据(api地址)
 */

var Server = function () {
    function Server(_ref) {
        var _ref$dev = _ref.dev,
            dev = _ref$dev === undefined ? false : _ref$dev,
            dir = _ref.dir;
        (0, _classCallCheck3.default)(this, Server);

        this.dir = (0, _path.resolve)(dir);
        this.dev = dev;
        this.server = (0, _express2.default)();
        this.dist = '.swrn';
        this.page = 'pages';

        this.assetPrefix = '/swrn';
        this.exist_mainjs = false;
        this.exist_maincss = false;
    }

    // 注册路由


    (0, _createClass3.default)(Server, [{
        key: 'registerRouter',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(routes) {
                var _this = this;

                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.next = 2;
                                return (0, _globPromise2.default)((0, _path.join)(this.dir, './' + this.dist + '/dist/main.js'));

                            case 2:
                                this.exist_mainjs = _context6.sent;
                                _context6.next = 5;
                                return (0, _globPromise2.default)((0, _path.join)(this.dir, this.dist, 'static/style/bundles/main.js.css'));

                            case 5:
                                this.exist_maincss = _context6.sent;


                                //js入口文件
                                this.server.get(this.assetPrefix + '/main.js', function () {
                                    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(req, res) {
                                        var path;
                                        return _regenerator2.default.wrap(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        path = (0, _path.join)(_this.dir, _this.dist, 'main.js');
                                                        _context.next = 3;
                                                        return (0, _render.serveStatic)(req, res, path);

                                                    case 3:
                                                        return _context.abrupt('return', _context.sent);

                                                    case 4:
                                                    case 'end':
                                                        return _context.stop();
                                                }
                                            }
                                        }, _callee, _this);
                                    }));

                                    return function (_x2, _x3) {
                                        return _ref3.apply(this, arguments);
                                    };
                                }());

                                if (this.exist_mainjs.length) {
                                    // 客户端入口文件 js
                                    this.server.get(this.assetPrefix + '/static/main.js', function () {
                                        var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(req, res) {
                                            var path;
                                            return _regenerator2.default.wrap(function _callee2$(_context2) {
                                                while (1) {
                                                    switch (_context2.prev = _context2.next) {
                                                        case 0:
                                                            path = (0, _path.join)(_this.dir, _this.dist, 'bundles/main.js');
                                                            _context2.next = 3;
                                                            return (0, _render.serveStatic)(req, res, path);

                                                        case 3:
                                                            return _context2.abrupt('return', _context2.sent);

                                                        case 4:
                                                        case 'end':
                                                            return _context2.stop();
                                                    }
                                                }
                                            }, _callee2, _this);
                                        }));

                                        return function (_x4, _x5) {
                                            return _ref4.apply(this, arguments);
                                        };
                                    }());
                                }

                                if (this.exist_maincss.length) {
                                    // 客户端入口文件 css
                                    this.server.get(this.assetPrefix + '/static/style/main.css', function () {
                                        var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(req, res) {
                                            return _regenerator2.default.wrap(function _callee3$(_context3) {
                                                while (1) {
                                                    switch (_context3.prev = _context3.next) {
                                                        case 0:
                                                            _context3.next = 2;
                                                            return (0, _render.serveStatic)(req, res, _this.exist_maincss[0]);

                                                        case 2:
                                                            return _context3.abrupt('return', _context3.sent);

                                                        case 3:
                                                        case 'end':
                                                            return _context3.stop();
                                                    }
                                                }
                                            }, _callee3, _this);
                                        }));

                                        return function (_x6, _x7) {
                                            return _ref5.apply(this, arguments);
                                        };
                                    }());
                                }

                                // 注册各个页面路由
                                routes.map(function () {
                                    var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(item, index) {
                                        return _regenerator2.default.wrap(function _callee5$(_context5) {
                                            while (1) {
                                                switch (_context5.prev = _context5.next) {
                                                    case 0:

                                                        //获取动态页面渲染
                                                        item.path && _this.server.get(item.path, function () {
                                                            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(req, res) {
                                                                var _Component, _Main, ComponentPath, Component, Main;

                                                                return _regenerator2.default.wrap(function _callee4$(_context4) {
                                                                    while (1) {
                                                                        switch (_context4.prev = _context4.next) {
                                                                            case 0:
                                                                                _Component = null, _Main = null;

                                                                                //if (this.dev) {
                                                                                //开发

                                                                                ComponentPath = (0, _path.join)(_this.dir, './' + _this.dist + '/dist/', item.page);

                                                                                //这里需要删除require的缓存

                                                                                delete require.cache[require.resolve(ComponentPath)];
                                                                                _Component = require(ComponentPath);

                                                                                if (_this.exist_mainjs.length) {
                                                                                    delete require.cache[require.resolve(_this.exist_mainjs[0])];
                                                                                    _Main = require(_this.exist_mainjs[0]);
                                                                                }

                                                                                //} else {

                                                                                //发布

                                                                                //}

                                                                                Component = _Component.default || _Component;
                                                                                Main = !!_Main && (_Main.default || _Main);
                                                                                _context4.next = 9;
                                                                                return _this.renderHtml({
                                                                                    req: req,
                                                                                    res: res,
                                                                                    Main: Main,
                                                                                    Component: Component,
                                                                                    routes: routes,
                                                                                    page: item.page
                                                                                });

                                                                            case 9:
                                                                            case 'end':
                                                                                return _context4.stop();
                                                                        }
                                                                    }
                                                                }, _callee4, _this);
                                                            }));

                                                            return function (_x10, _x11) {
                                                                return _ref7.apply(this, arguments);
                                                            };
                                                        }());

                                                        // 注册该页面的静态路由            
                                                        _this.publicSource(item.page);

                                                    case 2:
                                                    case 'end':
                                                        return _context5.stop();
                                                }
                                            }
                                        }, _callee5, _this);
                                    }));

                                    return function (_x8, _x9) {
                                        return _ref6.apply(this, arguments);
                                    };
                                }());

                                //注册mock路由
                                this.mockData();

                            case 11:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function registerRouter(_x) {
                return _ref2.apply(this, arguments);
            }

            return registerRouter;
        }()

        //静态资源处理，包括css、js、images...

    }, {
        key: 'publicSource',
        value: function () {
            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(page) {
                var _this2 = this;

                return _regenerator2.default.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:

                                //获取js
                                this.server.get('' + this.assetPrefix + page, function () {
                                    var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(req, res) {
                                        var path;
                                        return _regenerator2.default.wrap(function _callee7$(_context7) {
                                            while (1) {
                                                switch (_context7.prev = _context7.next) {
                                                    case 0:
                                                        path = (0, _path.join)(_this2.dir, _this2.dist, 'bundles/' + page);
                                                        _context7.next = 3;
                                                        return (0, _render.serveStatic)(req, res, path);

                                                    case 3:
                                                        return _context7.abrupt('return', _context7.sent);

                                                    case 4:
                                                    case 'end':
                                                        return _context7.stop();
                                                }
                                            }
                                        }, _callee7, _this2);
                                    }));

                                    return function (_x13, _x14) {
                                        return _ref9.apply(this, arguments);
                                    };
                                }());

                                //获取资源
                                //开发使用css内联模式  发布使用链接模式（缓存）
                                if (!this.dev) {

                                    //特殊处理css资源
                                    this.server.get(this.assetPrefix + '/static/style' + page.split('.')[0] + '.css', function () {
                                        var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(req, res) {
                                            var path;
                                            return _regenerator2.default.wrap(function _callee8$(_context8) {
                                                while (1) {
                                                    switch (_context8.prev = _context8.next) {
                                                        case 0:
                                                            path = (0, _path.join)(_this2.dir, _this2.dist, 'static/style/bundles/' + page + '.css');
                                                            _context8.next = 3;
                                                            return (0, _render.serveStatic)(req, res, path);

                                                        case 3:
                                                            return _context8.abrupt('return', _context8.sent);

                                                        case 4:
                                                        case 'end':
                                                            return _context8.stop();
                                                    }
                                                }
                                            }, _callee8, _this2);
                                        }));

                                        return function (_x15, _x16) {
                                            return _ref10.apply(this, arguments);
                                        };
                                    }());

                                    //获取图片资源
                                    this.server.use(this.assetPrefix + '/static', _express2.default.static((0, _path.join)(this.dir, this.dist, 'static')));
                                }

                            case 2:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function publicSource(_x12) {
                return _ref8.apply(this, arguments);
            }

            return publicSource;
        }()

        // mock数据

    }, {
        key: 'mockData',
        value: function () {
            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
                var _this3 = this;

                var mocks;
                return _regenerator2.default.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                _context10.next = 2;
                                return (0, _globPromise2.default)('mock/**/*.js', { cwd: this.dir });

                            case 2:
                                mocks = _context10.sent;

                                if (mocks.length) {
                                    mocks.map(function (item) {
                                        require((0, _path.join)(_this3.dir, item))(_this3.server);
                                    });
                                }

                            case 4:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function mockData() {
                return _ref11.apply(this, arguments);
            }

            return mockData;
        }()

        //服务预处理

    }, {
        key: 'prepare',
        value: function () {
            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {
                var options, routes;
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                options = {
                                    dir: this.dir,
                                    dev: this.dev,
                                    server: this.server,
                                    dist: this.dist,
                                    page: this.page,
                                    assetPrefix: this.assetPrefix
                                    // 获取路由
                                };
                                _context11.next = 3;
                                return new _router2.default(options).routes();

                            case 3:
                                routes = _context11.sent;

                                if (!this.dev) {
                                    _context11.next = 10;
                                    break;
                                }

                                options.routes = routes;
                                options.dist = this.dist;
                                options.entry = false;
                                _context11.next = 10;
                                return new _hotReloader2.default(options).start();

                            case 10:
                                _context11.next = 12;
                                return this.registerRouter(routes);

                            case 12:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function prepare() {
                return _ref12.apply(this, arguments);
            }

            return prepare;
        }()

        //开启服务

    }, {
        key: 'start',
        value: function () {
            var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(port, hostname) {
                return _regenerator2.default.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                _context12.next = 2;
                                return this.prepare();

                            case 2:
                                _context12.next = 4;
                                return this.server.listen(port, hostname);

                            case 4:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            function start(_x17, _x18) {
                return _ref13.apply(this, arguments);
            }

            return start;
        }()

        //send Html资源

    }, {
        key: 'renderHtml',
        value: function () {
            var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13(_ref15) {
                var req = _ref15.req,
                    res = _ref15.res,
                    page = _ref15.page,
                    routes = _ref15.routes,
                    Component = _ref15.Component,
                    Main = _ref15.Main;

                var query, initialProps, html, props, cssPath, jsPath, _cssPath, _html;

                return _regenerator2.default.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                query = req.params;

                                if (Component.getInitialProps) {
                                    _context13.next = 5;
                                    break;
                                }

                                _context13.t0 = {};
                                _context13.next = 8;
                                break;

                            case 5:
                                _context13.next = 7;
                                return Component.getInitialProps({ req: req, res: res });

                            case 7:
                                _context13.t0 = _context13.sent;

                            case 8:
                                initialProps = _context13.t0;
                                html = void 0, props = (0, _extends3.default)({}, initialProps, { route: page, query: query, routes: routes });


                                if (Main) {
                                    props = (0, _extends3.default)({}, props, { Component: Component, Main: Main });
                                    html = (0, _server.renderToStaticMarkup)(_react2.default.createElement(_app2.default, props), props);
                                } else {
                                    html = (0, _render2.default)(Component, props);
                                }

                                //css、js资源地址配置
                                cssPath = [];
                                jsPath = []; //主要依赖的文件，也就是客户端入口

                                //客户端路由自定义配置页面

                                if (Main) {
                                    jsPath.push({
                                        route: '/main.js',
                                        src: (0, _path.join)(this.assetPrefix, 'static/main.js')
                                    });
                                }

                                //当前页面需要的js文件
                                jsPath.push({
                                    route: page,
                                    src: (0, _path.join)(this.assetPrefix, page)
                                }, {
                                    route: '',
                                    src: (0, _path.join)(this.assetPrefix, '/main.js')
                                });

                                //判断是否有css，一个是当前页面 一个是公共的
                                _context13.next = 17;
                                return (0, _globPromise2.default)((0, _path.join)(this.dir, this.dist, 'static/style/bundles', page + '.css'));

                            case 17:
                                _cssPath = _context13.sent;


                                if (this.exist_maincss.length) {
                                    cssPath.push(this.assetPrefix + '/static/style/main.css');
                                }

                                if (_cssPath.length) {
                                    cssPath.push(this.assetPrefix + '/static/style' + page.split('.')[0] + '.css');
                                }

                                props.assetPrefix = this.assetPrefix;

                                _html = (0, _render2.default)(_document2.default, {
                                    jsPath: jsPath,
                                    cssPath: cssPath,
                                    props: props,
                                    html: html
                                });


                                res.send('<!DOCTYPE html>' + _html);

                            case 23:
                            case 'end':
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            function renderHtml(_x19) {
                return _ref14.apply(this, arguments);
            }

            return renderHtml;
        }()
    }]);
    return Server;
}();

exports.default = Server;