'use strict';

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (content, sourceMap) {
  var _this = this;

  this.cacheable();

  var query = _loaderUtils2.default.getOptions(this);

  //当前解析的文件路径 和 当前文件的所在路径
  //console.log(this._module.issuer.resource)
  //console.log(this._module.resource)
  //console.log(this._module.userRequest)
  //console.log(this._module.rawRequest)

  var name = query.name || '[hash].[ext]';
  var context = query.context || this.options.context;
  var regExp = query.regExp;
  var opts = { context: context, content: content, regExp: regExp };
  var interpolatedName = _loaderUtils2.default.interpolateName(this, name, opts);
  var resource = this._module.resource;

  var emit = function emit(code, map, writeCode) {
    writeCode = typeof writeCode != 'undefined' ? writeCode : code;
    _this.emitFile(interpolatedName, writeCode, map);
    _this.callback(null, code, map);
  };

  if (query.transform) {
    var transformed = query.transform({ content: content, sourceMap: sourceMap, interpolatedName: interpolatedName, resource: resource });
    return emit(transformed.content, transformed.sourceMap, transformed._content);
  }

  return emit(content, sourceMap, content);
};