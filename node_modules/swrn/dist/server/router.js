'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _globPromise = require('glob-promise');

var _globPromise2 = _interopRequireDefault(_globPromise);

var _path2 = require('path');

var _webpackDevMiddleware = require('webpack-dev-middleware');

var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);

var _render = require('./render');

var _render2 = _interopRequireDefault(_render);

var _webpack = require('./build/webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _clean = require('./build/clean');

var _clean2 = _interopRequireDefault(_clean);

var _compiler = require('./compiler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Router = function () {
    function Router(options) {
        (0, _classCallCheck3.default)(this, Router);

        this.options = options;

        this.dev = options.dev;
        this.dir = options.dir;
        this.dist = options.dist;
        this.page = options.page;
    }

    (0, _createClass3.default)(Router, [{
        key: 'routes',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var _this = this;

                var _main, _ref2, _ref3, compiler;

                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return (0, _globPromise2.default)('main.js', { cwd: this.dir });

                            case 2:
                                _main = _context3.sent;

                                if (!_main.length) {
                                    _context3.next = 15;
                                    break;
                                }

                                this.options.entry = { 'bundles/main.js': (0, _path2.join)(this.dir, 'main.js') };
                                this.options.dist = '.tmp';

                                _context3.next = 8;
                                return _promise2.default.all([(0, _webpack2.default)(this.options), (0, _clean2.default)(this.options)]);

                            case 8:
                                _ref2 = _context3.sent;
                                _ref3 = (0, _slicedToArray3.default)(_ref2, 1);
                                compiler = _ref3[0];


                                (0, _webpackDevMiddleware2.default)(compiler, {
                                    publicPath: '/_swrn/webpack/',
                                    noInfo: true,
                                    quiet: true,
                                    clientLogLevel: 'warning'
                                });

                                return _context3.abrupt('return', new _promise2.default(function (resolve, reject) {
                                    compiler.plugin('done', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                        return _regenerator2.default.wrap(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        _context.next = 2;
                                                        return (0, _compiler.replaceStaticSource)(_this.options);

                                                    case 2:
                                                        resolve();

                                                    case 3:
                                                    case 'end':
                                                        return _context.stop();
                                                }
                                            }
                                        }, _callee, _this);
                                    })));
                                }).then((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                                    return _regenerator2.default.wrap(function _callee2$(_context2) {
                                        while (1) {
                                            switch (_context2.prev = _context2.next) {
                                                case 0:
                                                    _context2.next = 2;
                                                    return _this.getConfigRoutes(_this.options);

                                                case 2:
                                                    return _context2.abrupt('return', _context2.sent);

                                                case 3:
                                                case 'end':
                                                    return _context2.stop();
                                            }
                                        }
                                    }, _callee2, _this);
                                }))));

                            case 15:
                                _context3.next = 17;
                                return this.getRoutes();

                            case 17:
                                return _context3.abrupt('return', _context3.sent);

                            case 18:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function routes() {
                return _ref.apply(this, arguments);
            }

            return routes;
        }()

        //这里获取的是默认路由

    }, {
        key: 'getRoutes',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
                var _this2 = this;

                var pages, routes;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                _context4.next = 2;
                                return (0, _globPromise2.default)(this.page + '/**/*.js', { cwd: this.dir });

                            case 2:
                                pages = _context4.sent;
                                routes = [];


                                if (pages.length) {
                                    pages.map(function (item) {
                                        var _path = item.substr(0, item.length - 3).substr(4);
                                        _path = _path.split("/");
                                        _path.shift();

                                        var path = void 0,
                                            page = void 0,
                                            pop = false;

                                        if (_path[_path.length - 1] == 'index') {
                                            _path.pop();
                                            pop = true;
                                        }

                                        if (_path.length) {
                                            var _join = _path.join('/');
                                            path = '/' + _join;
                                            page = '/' + _this2.page + '/' + _join + (pop ? "/index" : '') + '.js';
                                        } else {
                                            path = '/';
                                            page = '/' + _this2.page + '/index.js';
                                        }

                                        routes.push({
                                            page: page,
                                            path: path
                                        });
                                    });
                                }

                                return _context4.abrupt('return', routes);

                            case 6:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function getRoutes() {
                return _ref6.apply(this, arguments);
            }

            return getRoutes;
        }()

        //获取引用swrn/router的路由

    }, {
        key: 'getConfigRoutes',
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
                var _Router, routePath, Router, routerHtml, singleRouter, _routers, routers;

                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                global.SWRN_ROUTE = true;
                                _Router = void 0;
                                routePath = (0, _path2.join)(this.dir, this.options.dist + '/dist/main.js');

                                _Router = require(routePath);
                                Router = _Router.default || _Router;
                                routerHtml = (0, _render2.default)(Router);
                                singleRouter = /swrn_route=[\'\"]?([^\'\"]*)[\'\"]?/i;
                                _routers = routerHtml.match(/swrn_route=[\'\"]?([^\'\"]*)[\'\"]?/gi);
                                routers = [];


                                if (!!_routers == true) {
                                    _routers.map(function (item) {
                                        var _tmp = item.match(singleRouter);
                                        _tmp = JSON.parse(_tmp[1].replace(/&quot;/g, '"'));

                                        _tmp.page = _tmp.render;
                                        delete _tmp.render;

                                        routers.push(_tmp);
                                    });
                                }

                                global.SWRN_ROUTE = false;
                                routers.push({ page: '/main.js', path: null });
                                _context5.next = 14;
                                return (0, _clean2.default)(this.options);

                            case 14:
                                return _context5.abrupt('return', routers);

                            case 15:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function getConfigRoutes() {
                return _ref7.apply(this, arguments);
            }

            return getConfigRoutes;
        }()
    }]);
    return Router;
}();

exports.default = Router;