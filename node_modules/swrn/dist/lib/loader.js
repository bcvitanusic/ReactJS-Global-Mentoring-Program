'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _EventEmitter = require('./EventEmitter');

var _EventEmitter2 = _interopRequireDefault(_EventEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Loader = function () {
    function Loader(assetPrefix) {
        (0, _classCallCheck3.default)(this, Loader);


        this.assetPrefix = assetPrefix;
        this.dev = process.env.NODE_ENV == 'development';
        this.currentRoute = '';

        this.pageCache = {};

        this.pageRegisterEvents = new _EventEmitter2.default();
        this.loadingRoutes = {};

        this.subscriptions = new _set2.default();
    }

    // 加载资源进行判断区分


    (0, _createClass3.default)(Loader, [{
        key: 'loadPage',
        value: function loadPage(route) {
            var _this = this;

            return new _promise2.default(function (resolve, reject) {

                //定义 加载完毕执行触发的内容，即触发回调
                var fire = function fire(data) {
                    _this.pageRegisterEvents.off(route);
                    delete _this.loadingRoutes[route];
                    resolve(data);
                };

                //查询是否有缓存 路由
                var cachePage = _this.pageCache[route];

                if (route == '/main.js' || cachePage) {
                    _this.currentRoute = route;
                    resolve(cachePage);
                    return;
                }

                //将当前路由注册到事件监听上，监听触发，执行fire回调
                _this.pageRegisterEvents.on(route, fire);

                //如果服务端渲染就不需要了
                if (document.getElementById('__SWRN_PAGE__' + route)) {
                    return;
                }

                //开始加载页面所需要的资源，包括js、css
                if (!_this.loadingRoutes[route]) {
                    _this.loadSource(route);
                    _this.loadingRoutes[route] = true;
                }
            });
        }

        //发起资源加载操作

    }, {
        key: 'loadSource',
        value: function loadSource(route) {

            //发布环境下需要加载css文件
            if (!this.dev) {
                var style = document.createElement('link');
                style.rel = "stylesheet";
                style.href = this.assetPrefix + '/static/style' + route.split('.')[0] + '.css';
                document.head.appendChild(style);
            }

            //加载js文件
            var script = document.createElement('script');
            script.src = '' + this.assetPrefix + route;
            script.type = 'text/javascript';
            document.body.appendChild(script);
        }

        //新页面加载进来，需要触发路由的注册事件

    }, {
        key: 'registerPage',
        value: function registerPage(route, fn) {
            var _this2 = this;

            var register = function register() {
                var component = fn();
                _this2.pageCache[route] = component;
                _this2.pageRegisterEvents.emit(route, component);
            };

            //记录当前路由
            if (route != '/main.js') {
                this.currentRoute = route;
            }

            register();
        }
    }, {
        key: 'subscribe',
        value: function subscribe(fn) {
            var _this3 = this;

            this.subscriptions.add(fn);
            return function () {
                return _this3.subscriptions.delete(fn);
            };
        }

        //这里是用于热更新时触发

    }, {
        key: 'update',
        value: function update(data) {
            data.route = this.currentRoute;
            this.notify(data);
        }
    }, {
        key: 'notify',
        value: function notify(data) {
            this.subscriptions.forEach(function (fn) {
                return fn(data);
            });
        }
    }]);
    return Loader;
}();

exports.default = Loader;