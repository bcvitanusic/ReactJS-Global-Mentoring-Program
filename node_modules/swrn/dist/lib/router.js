'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Link = exports.Route = exports.Router = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.ResolveRouter = ResolveRouter;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ResolveRouter(routes, pathname) {
    var resolve_router = {
        query: {},
        page: null
    };

    routes.map(function (item) {
        if (item.path) {
            var path = item.path.split("/");
            var queryId = [],
                dynamic = false;
            path.map(function (v, i) {
                if (v.substr(0, 1) === ':') {
                    path[i] = '(\\w+)';
                    queryId.push(v.substr(1));
                    dynamic = true;
                }
            });

            if (dynamic) {

                path = new RegExp(path.join("\\/"));

                var match = pathname.match(path);

                if (match) {
                    for (var i = 1; i < match.length; i++) {
                        resolve_router.query[queryId[i - 1]] = match[i];
                    }
                    resolve_router.page = item.page;
                }
            } else {

                if (item.path === pathname) {

                    resolve_router.page = item.page;
                }
            }
        }
    });

    return resolve_router;
}

var Router = exports.Router = function (_React$Component) {
    (0, _inherits3.default)(Router, _React$Component);

    function Router(props, context) {
        (0, _classCallCheck3.default)(this, Router);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Router.__proto__ || (0, _getPrototypeOf2.default)(Router)).call(this, props, context));

        var query = {};

        if ((0, _utils.isInServer)()) {
            query = {};
        } else {
            query = ResolveRouter(context.SWRN_PROPS.data.routes, location.pathname).query;
        }

        _this.state = {
            query: query
        };
        return _this;
    }

    (0, _createClass3.default)(Router, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps() {
            var _ResolveRouter = ResolveRouter(this.context.SWRN_PROPS.data.routes, location.pathname),
                query = _ResolveRouter.query;

            this.setState({
                query: query
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            //服务器处理路由信息
            if ((0, _utils.isInServer)() && (0, _utils.isHandleRouter)()) {
                return this.props.children;
            }

            //客户端 需要对无关路由进行删除 服务器渲染
            var _Component = [],
                SWRN_PROPS = void 0,
                route = void 0,
                query = void 0,
                Component = void 0;
            var contextSwrn_Props = this.context.SWRN_PROPS;

            if ((0, _utils.isInServer)()) {

                Component = contextSwrn_Props.Component;
                route = contextSwrn_Props.route;
                query = contextSwrn_Props.query;
                SWRN_PROPS = (0, _assign2.default)({}, contextSwrn_Props);
            } else {

                Component = contextSwrn_Props.Component;
                route = contextSwrn_Props.data.route;
                query = contextSwrn_Props.data.query;
                SWRN_PROPS = (0, _assign2.default)({}, contextSwrn_Props.data);
            }

            var children = this.props.children;


            delete SWRN_PROPS.routes;
            delete SWRN_PROPS.route;

            children.map(function (item, index) {
                if (typeof item.type === 'function') {
                    var render = item.props.render;

                    if (render === route) {
                        SWRN_PROPS.query = (0, _utils.isInServer)() ? query : _this2.state.query;
                        _Component.push(_react2.default.createElement(Component, (0, _extends3.default)({
                            key: index
                        }, item.props, SWRN_PROPS)));
                    }
                } else {
                    _Component.push(item);
                }
            });
            return _Component;
        }
    }]);
    return Router;
}(_react2.default.Component);

Router.contextTypes = {
    SWRN_PROPS: _propTypes2.default.object
};

var Route = exports.Route = function (_React$Component2) {
    (0, _inherits3.default)(Route, _React$Component2);

    function Route() {
        (0, _classCallCheck3.default)(this, Route);
        return (0, _possibleConstructorReturn3.default)(this, (Route.__proto__ || (0, _getPrototypeOf2.default)(Route)).apply(this, arguments));
    }

    (0, _createClass3.default)(Route, [{
        key: 'render',
        value: function render() {
            //处理路由配置，需要返回的消息
            if ((0, _utils.isInServer)() && (0, _utils.isHandleRouter)()) {
                return _react2.default.createElement('swrn', { swrn_route: (0, _stringify2.default)(this.props) });
            }
            //不处理直接返回
            return null;
        }
    }]);
    return Route;
}(_react2.default.Component);

var Link = exports.Link = function (_React$Component3) {
    (0, _inherits3.default)(Link, _React$Component3);

    function Link(props) {
        (0, _classCallCheck3.default)(this, Link);

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (Link.__proto__ || (0, _getPrototypeOf2.default)(Link)).call(this, props));

        _this4.onClick = _this4.onClick.bind(_this4);
        return _this4;
    }

    (0, _createClass3.default)(Link, [{
        key: 'onClick',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var _context$SWRN_PROPS$d, routes, assetPrefix, routeLoader, to, _ResolveRouter2, route, Component;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context$SWRN_PROPS$d = this.context.SWRN_PROPS.data, routes = _context$SWRN_PROPS$d.routes, assetPrefix = _context$SWRN_PROPS$d.assetPrefix;
                                routeLoader = this.context.SWRN_PROPS.routeLoader;
                                to = this.props.to;
                                _ResolveRouter2 = ResolveRouter(routes, to), route = _ResolveRouter2.page;


                                window.history.pushState({ url: location.href, as: to }, null, to);

                                _context.next = 7;
                                return routeLoader.loadPage(route);

                            case 7:
                                Component = _context.sent;


                                routeLoader.notify({ Component: Component, route: route });

                            case 9:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function onClick() {
                return _ref.apply(this, arguments);
            }

            return onClick;
        }()
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                children = _props.children,
                to = _props.to,
                tag = _props.tag;


            if (typeof children === 'string' || children.type == 'img') {

                tag = tag || 'a';

                return _react2.default.createElement(tag, (0, _extends3.default)({}, this.props, {
                    onClick: this.onClick
                }), children);
            }

            var props = (0, _extends3.default)({}, this.props, {
                onClick: this.onClick
            });

            var child = _react2.default.Children.only(children);

            return _react2.default.cloneElement(child, props);
        }
    }]);
    return Link;
}(_react2.default.Component);

Link.contextTypes = {
    SWRN_PROPS: _propTypes2.default.object
};